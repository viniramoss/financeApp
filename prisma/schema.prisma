// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  created_at      DateTime          @default(now())
  update_at       DateTime          @updatedAt
  budget          Int
  transaction     Transaction[]
  PaymentMethod   PaymentMethod[]
  PaymentCategory PaymentCategory[]
  Reminder        Reminder[]
  Settings        Settings[]
}

model Transaction {
  id                String          @id @default(uuid())
  name              String
  amount            Float
  description       String?
  date              DateTime
  type              TransactionType
  userId            String
  created_at        DateTime        @default(now())
  update_at         DateTime        @updatedAt
  paymentMethodId   String
  paymentCategoryId String

  paymentCategory PaymentCategory @relation(fields: [paymentCategoryId], references: [id])
  paymentMethod   PaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([date])
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

model PaymentMethod {
  id         String   @id @default(uuid())
  name       String
  userId     String
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction Transaction[]

  @@map("payMethod")
}

model PaymentCategory {
  id         String   @id @default(uuid())
  name       String
  img        String? // URL da imagem
  color      String? // cor hexadecimal
  userId     String
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction Transaction[]

  @@map("payCategories")
}

model Reminder {
  id          String         @id @default(uuid())
  name        String
  description String
  date        DateTime       @default(now())
  userId      String
  status      ReminderStatus @default(PENDING)
  created_at  DateTime       @default(now())
  update_at   DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reminder")
}

enum ReminderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Settings {
  id         String   @id @default(uuid())
  userId     String
  theme      String   @default("light")
  created_at DateTime @default(now())
  update_at  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
